LAB6- condicionais
      0 => B"0100_011_000000000", --LD R3, 0
      1 => B"0100_100_000000000", --LD R4, 0
      2 => B"0001_011_000000000", --MOV A,R3
      3 => B"0111_100_000000000", --ADD A,R4
      4 => B"0010_100_000000000", --MOV R4,A
      5 => B"0011_000_000000001", --LD A,1
      6 => B"0111_011_000000000", --ADD A,R3
      7 => B"0010_011_000000000", --MOV R3,A
      8 => B"0011_000_000011110", --LD A,30
      9 => B"1010_011_000000000", --CMP R3,A
      10 => B"0110_001_011111000", --JPB 1, -8
      11 => B"0001_100_000000000", --MOV A,R4
      12 => B"0010_101_000000000", --MOV R5,A
      13 => B"0000_000_000000000", --NOP

LAB7 -Ram

      LD R1, 0x3F;
      LD R2, 0x16;
      LD R3, 0x27;
      LD R4, 0x07;
      LD R5, 0x3D;
      LD R6, 0x02;
      NOP;
      LD R7, 0X01;
      NOP;
      SW R2, (R1);
      SW R3, (R4);
      LD R4, 0x0C;
      SW R1, (R4);
      LD R4, 0x02;
      SW R6, (R4);
      LD R4, 0x03;
      SW R7, (R4);
      NOP;
      LD R1, 0;
      NOP;
      SW R4, (R4);
      LD R6, 0x0A;
      LW R2, (R6);
      LD R3, 0xFFE;
      SW R4, (R6)

Validacao - Crivo de Erastotenes

      --Carrega os numeros na RAM em sequencia
      LD R1,0;
      LD A,1;
      ADD A, R1;37=>B"0110_001_011111010", --
      MOV R1, A;
      SW R1, (R1);
      LD A, 32; 
      CMP R1, A;
      JPB 1, -6;
      
      --Escolhe o primeiro numero e verifica se Ã© primo
      LD R4, 2;
      LW R5, (R4)
      LD A, 0;
      CMP R5, A;
      JPB 0, 10; --Se nao for primo pula para o proximo numero
      MOV A, R5
      MOV R1, A
      
      --Se for primo elimina os multiplos
      MOV A, R5
      ADD A, R1;
      MOV R1, A;
      SW R0, (R1);

      LD A, 32; 
      CMP R1, A;
      JPB 1, -6;
      
      --Vai ao proximo numero
      LD A, 1;
      ADD A, R4;
      MOV R4, A
      
      --Loopa enquanto o ctz de R4 for menor que 5 (<= 4)
      CTZ R4 (A = ctz(R4))
      MOV R7,A
      LD A, 5
      CMP R7, A;
      JPB 3, -20

      --Itera a ram e coloca o resultado na saida da ula
      LD R1, 1;
      LD A, 1;
      ADD A, R1;
      MOV R1,A;
      LW R3, (R1);
      LD A, 32;
      CMP R1, A;
      JPB 1, -6;

Validacao - Programa com SUBB, SUBI.

   0 => B"0100_001_000000101", -- LD R1,5;
   1 => B"0100_010_000000010", -- LD R2,2;
   2 => B"0001_001_000000000", -- MOV A,R1;
   3 => B"1000_010_000000000", -- SUB R2 (A = R2 - A);
   4 => B"0000_000_000000000", -- NOP  
   5 => B"0011_000_000001010", -- LD A 10
   6 => B"1001_000_000000101", -- SUBI 5 (A = 5 - A);
   7 => B"0000_000_000000000", -- NOP
   8 => B"1110_001_000000000", -- SUBB R1 (A = R1(5) - A);
   9 => B"1110_001_000000000", -- SUBB R1 (A = R1(5) - A);
   10 => B"0101_000_000010100", -- JUMP 20
   11 => B"0000_000_000000000", -- NOP
   12 => B"0000_000_000000000", -- NOP
   13 => B"0000_000_000000000", -- NOP
   14 => B"0000_000_000000000", -- NOP
   15 => B"0011_000_001110101", -- LD A, 117 (0x75)

   20=> B"0001_001_000000000", -- MOV A, R1;
   21=> B"1000_001_000000000", -- SUB R1;
   22=> B"0010_001_000000000", -- MOV R1,A
   23=> B"0000_000_000000000", -- NOP